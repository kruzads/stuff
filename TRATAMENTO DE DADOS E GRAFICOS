library(nimble, warn.conflicts = FALSE)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(tidyr)
library(MCMCvis)
library(BayesFactor)
library(bayestestR)
library(plyr)
library(readxl)
library(tidyverse)
library(ggrepel)
library(sysfonts)
library(showtext)



#Estes exemplos são apenas para o modelo de Poisson Dupla


#############################################################################################################################################################################
################################# GRÁFICO PARA COMPARAR GOLOS MARCADOS EM CASA E FORA COM OS ESPERADOS PARA UMA DISTRIBUIÇÃO POISSON (FIGURA 2.1) ###########################

#CASA
probs_h<-dpois(0:6,mean(liga14_20$y_g1)) 
esperado_h<-306*probs_h

#FORA
probs_a<-dpois(0:6,mean(liga14_20$y_g2)) 
esperado_a<-306*probs_a

a<- as.data.frame(table(factor(liga14_20$y_g1, levels=0:max(liga14_20$y_g1,liga14_20$y_g2))))
b<- as.data.frame(table(factor(liga14_20$y_g2, levels=0:max(liga14_20$y_g1,liga14_20$y_g2))))

golos <- 0:max(liga14_20$y_g1,liga14_20$y_g2)
Casa<-a$Freq
Fora<-b$Freq
df1 <- data.frame(Casa, Fora, golos)
df2 <- melt(df1, id.vars='golos') #DATAFRAME COM OS GOLOS MARCADOS, O LOCAL E A FREQUÊNCIA RELATIVA

cor<-c(rep("green",7),rep("blue",7))
df3<-data.frame(df2,c(esperado_h,esperado_a),cor)
colnames(df3)[4]<-"pontos.Esperado"

df3$value<-df3$value/306
df3$pontos.Esperado<-c(probs_a,probs_h)

ggplot(df3, aes(x=golos, y=value, fill=variable)) + geom_bar(stat='identity', position='dodge',colour="Black") + 
  scale_x_continuous(labels=as.character(golos),breaks=golos) + 
  labs(x="Golos por Jogo", y="Frequência Relativa") +
  scale_y_continuous(breaks = seq(from = 0, to = 1, by = 0.05), limits = c(0,0.4))+
  geom_point(data = df3,aes(y=pontos.Esperado,col=cor),size=3) + 
  geom_line(data=df3,aes(x=golos,y=pontos.Esperado,col=cor),size=1.5) +
  scale_fill_manual("Equipa", values = c("Casa" = "light green", "Fora" = "light blue"))+
  scale_colour_manual(values = c("green" = "dark green", "blue" = "dark blue"), name = "cor") + tema



#############################################################################################################################################################################
######## GRÁFICOS DE VARIAÇÃO DOS PARÂMETROS ATT E DEF DA EQUIPA 1 E DO PARÂMETRO HOME POR ITERAÇÃO E GRÁFICOS DE DENSIDADE DE PROBABILIDADE DOS MESMOS (FIGURA 6.1) ########

MCMCtrace(nimbleMCMC_fut$samples, params = c('home',"att[1]","def[1]"), ISB = FALSE, exact = TRUE, pdf = FALSE, lwd_den = 3, lty_pr = 2,
          sz_txt = 1.3, sz_ax = 2, sz_ax_txt = 1.2, sz_tick_txt = 1.2, sz_main_txt = 1.3)

#############################################################################################################################################################################
############################################## RESUMO DAS CARACTERÍSTICAS DOS PARÂMETROS PARA AS EQUIPAS 4, 9 E 13 (FIGURA 6.2) #############################################

MCMCsummary(nimbleMCMC_fut$samples, params = c("home","att[4]","def[4]","att[9]","def[9]","att[13]","def[13]"), round=4, ISB = FALSE, exact = TRUE)

#############################################################################################################################################################################
####################################### INTERVALOS DE 95% DE CREDIBILIDADE DE CAUDAS IGUAIS PARA OS PARÂMETROS ATT E DEF (FIGURA 6.4) #######################################

index<-1:18
lista_equipas <- c("Académica","Arouca","Belenenses","Benfica","Boavista","Braga","Estoril","FC Porto", "Gil Vicente","Marítimo","Moreirense","Nacional",
                   "Paços Ferreira","Penafiel","Rio Ave", "Sporting","Vitória FC","Vitória SC")

MCMCplot(nimbleMCMC_fut$samples, params = 'att', labels = paste(index,": ",lista_equipas,sep="" ), main="Intervalos de 95% de credibilidade de caudas iguais",  
         xlab = "Parâmetro de ataque", rank=TRUE, guide_lines = TRUE, horiz = FALSE)
MCMCplot(nimbleMCMC_fut$samples, params = 'def', labels = paste(index,": ",lista_equipas,sep="" ), main="Intervalos de 95% de credibilidade de caudas iguais",  
         xlab = "Parâmetro de defesa", rank=TRUE, guide_lines = TRUE, horiz = FALSE)
         


#############################################################################################################################################################################
############################################################################  DISTRIBUIÇÃO PREDITIVA ########################################################################
       
#PARA MULTIPLAS CADEIAS

n<-dim(nimbleMCMC_fut[[1]]$chain1)[1] #igual numero de valores simulados para todas as cadeias, 5000 neste caso

y.pred1.chain1<-matrix(0,306,n)
y.pred1.chain2<-matrix(0,306,n)
y.pred1.chain3<-matrix(0,306,n)

y.pred2.chain1<-matrix(0,306,n)
y.pred2.chain2<-matrix(0,306,n)
y.pred2.chain3<-matrix(0,306,n)

set.seed(1) #FIXA A SEMENTE PARA OBTER SEMPRE OS MESMOS VALORES
for(game in 1:306){
  y.pred1.chain1[game,]<-rpois(n,nimbleMCMC_fut[[1]]$chain1[, paste("theta[",game,", 1]", sep="")])
  y.pred1.chain2[game,]<-rpois(n,nimbleMCMC_fut[[1]]$chain2[, paste("theta[",game,", 1]", sep="")])
  y.pred1.chain3[game,]<-rpois(n,nimbleMCMC_fut[[1]]$chain3[, paste("theta[",game,", 1]", sep="")])
  
  y.pred2.chain1[game,]<-rpois(n,nimbleMCMC_fut[[1]]$chain1[, paste("theta[",game,", 2]", sep="")])
  y.pred2.chain2[game,]<-rpois(n,nimbleMCMC_fut[[1]]$chain2[, paste("theta[",game,", 2]", sep="")])
  y.pred2.chain3[game,]<-rpois(n,nimbleMCMC_fut[[1]]$chain3[, paste("theta[",game,", 2]", sep="")])
}
         
#Arrays/matrizes de 3d (jogos,iteração,cadeia)
y.pred1<-array(c(y.pred1.chain1,y.pred1.chain2,y.pred1.chain3),c(306,5000,3))
y.pred2<-array(c(y.pred2.chain1,y.pred2.chain2,y.pred2.chain3),c(306,5000,3))         

#############################################################################################################################################################################
################################################################## PREDICTIVE POSTERIOR CHECK (FIGURA 6.7) ##################################################################
  
library(bayesplot)

data2<-t(y.pred1[,2000:2500,1]-y.pred2[,2000:2500,1])

color_scheme_set("brightblue")
#GRÁFICOS DE BARRAS PARA AS FREQUENCIAS RELATIVAS DAS DIFERENÇAS DE GOLOS E RESULTADOS
ppc_bars(liga14_20$y_g1 - liga14_20$y_g2, data2, freq = FALSE) +  yaxis_text() + scale_y_continuous(breaks = seq(0, 1, 0.05), expand = c(0, 0), limits = c(0, 0.31)) +
  scale_x_continuous(breaks = seq(-15,15, 1),limits = c(-8, 8)) + labs(x = "Diferença de golos", y = "Dens. Preditiva Posteriori") + tema

tema <- theme(legend.title = element_text(colour = "steelblue", face = "bold", family = "open"),
              axis.title = element_text(family = "open", size = (15), colour = "steelblue4", face = "bold"),
              axis.text = element_text(family = "open", colour = "black", size = (15),), legend.position = c(0.9, 0.8),legend.key.size = unit(1, 'cm'))

#############################################################################################################################################################################
############################################################################# TRATAMENTO DE DADOS ###########################################################################
########################################################### VERIFICAR RESULTADOS PARA TODAS AS ITERAÇÕES DE CADA JOGO #######################################################
  
vict_home<-array(0,c(306,5000,3)) #vitoria da equipa de fora 
ties_home<-array(0,c(306,5000,3)) #empate da equipa de casa
ties_away<-array(0,c(306,5000,3)) #empate da equipa de fora
vict_away<-array(0,c(306,5000,3)) #vitoria da equipa de fora

#guarda nessa posição da matriz o índice da equipa se o resultado ocorre
for(game in 1:306){
  for(iter in 1:n){
    for(chain in 1:3){
      if(y.pred1[game,iter,chain] > y.pred2[game,iter,chain]){
        vict_home[game,iter,chain]<-liga14_20$h_g[game]
        } else if(y.pred1[game,iter,chain] == y.pred2[game,iter,chain]){
          ties_home[game,iter,chain]<-liga14_20$h_g[game]
          ties_away[game,iter,chain]<-liga14_20$a_g[game]
        } else if(y.pred1[game,iter,chain] < y.pred2[game,iter,chain]){
          vict_away[game,iter,chain]<-liga14_20$a_g[game]
        }
    }
  }
}

#contadores de resultados para cada temporada simulada
wins_tab<-matrix(0,18,n)
ties_tab<-matrix(0,18,n)
losses_tab<-matrix(34,18,n)

for(game in 1:306){
  for(iter in 1:n){
    for(team in 1:18){
      if(vict_home[game,iter,1]==team || vict_away[game,iter,1]==team){
        wins_tab[team,iter]<- wins_tab[team,iter]+1
      }
      if(ties_home[game,iter,1]==team || ties_away[game,iter,1]==team){
        ties_tab[team,iter]<-ties_tab[team,iter]+1
      }
    }
  }
}

losses_tab<-losses_tab-wins_tab-ties_tab


##############################################################################################################################################################################
############################################################### Calcular pontos finais para todas as iterações ###############################################################
#1 iteração = 1 campeonato
points_team_new<-array(0,c(18,n,3)) #matrizes de pontos finais
points_array<-array(0,c(18,34,n,3)) #matrizes de pontos ganhos (resultados ao longo do campeonato)

for(chain in 1:3){
  for(iter in 1:n){
    for(team in 1:18){
      for(game in 1:306){
        if(team == vict_home[game,iter,chain] || team == vict_away[game,iter,chain]){
          points_team_new[team,iter,chain] <- points_team_new[team,iter,chain] + 3
          points_array[team,liga14_20$Jornada[game],iter,chain] <- 3
          } else if(team == ties_home[game,iter,chain] || team == ties_away[game,iter,chain]){
            points_team_new[team,iter,chain] <- points_team_new[team,iter,chain] + 1
            points_array[team,liga14_20$Jornada[game],iter,chain] <- 1
          }
      }
    }
  }
}

###############################################################################################################################################################################
################################################################### GOLOS MARCADOS POR JORNADA E POR EQUIPA ###################################################################
goals_array<-array(0,c(18,34,n)) #matriz de golos marcados para cada jornada
goals_acum<-array(0,c(18,34,n)) #mtriz de golos acumulados no fim de cada jornada

for(iter in 1:n){
  for(team in 1:18){
    for(game in 1:306){
      if(team ==  liga14_20$h_g[game]){
        goals_array[team,liga14_20$Jornada[game],iter] <- goals_array[team,liga14_20$Jornada[game],iter] + y.pred1[game,iter,1]
      } else if(team ==  liga14_20$a_g[game]){
        goals_array[team,liga14_20$Jornada[game],iter] <- goals_array[team,liga14_20$Jornada[game],iter] + y.pred2[game,iter,1]
      }
    }
    goals_acum[team,,iter]<-cumsum(goals_array[team,,iter])
  }
}


###############################################################################################################################################################################
############################################################### CALCULA OS PONTOS ACUMULADOS AO FIM DE CADA JORNADA ###########################################################
#CALCULA OS PONTOS ACUMULADOS AO FIM DE CADA JORNADA
acum_points<-array(0,c(18,34,n,3))

for(chain in 1:3){
  for(iter in 1:n){
    for(jornada in 1:34){
      for(team in 1:18){
        acum_points[team,,iter,chain]<-cumsum(points_array[team,,iter,chain])
      } 
    }
  }
}

#da um peso aos goolos marcados, para no caso de empate de pontos numa jornada a equipa com mais golos marcados aparece acima na tabela
pontos_peso2<-acum_points[,,,1]+0.0001*goals_acum[,,] 


##############################################################################################################################################################################
############################################################### CALCULA OS PONTOS ACUMULADOS POR ORDEM DECRESCENTE ###########################################################
#APENAS PARA A CADEIA 1
order_cumsum<-array(0,c(18,34,n))

for(iter in 1:n){
  for(jornada in 1:34){
    filler<-c() #para permitir reoordenar os valores usando sort passo para um vector
    filler<-c(pontos_peso2[,jornada,iter])
      
    order_cumsum[,jornada,iter]<-sort(filler,decreasing=TRUE)
  }
}


#############################################################################################################################################################################
#################################################################### RANKING NA TABELA PARA CADA JORNADA ####################################################################
placements_during<-array(0,c(18,34,n))

for(iter in 1:n){
  for (jornada in 1:34){
    for (team in 1:18){
      placements_during[team,jornada,iter]<-which(pontos_peso2[team,jornada,iter]==order_cumsum[,jornada,iter])[1]
      #para cada valor da matriz dos pontos totais vai ver a posicao onde o valor é igual na matriz dos pontos ordenados,
      #retorna a primeira posiçao(caso haja empate de pontos) na linha da equipa
    }
  }
}


############################################################################################################################################################################
##################################### GRÁFICOS DE PROBABILIDADE DE TERMINAR NOS 3 PRIMEIROS E 2 ULTIMOS LUGARES (Figura 6.9) ###############################################
tab_counts<-matrix(0,18,1) #Tabela de contagem de ocorrência

for(iter in 1:n){
  for(team in 1:18){
    if(placements_during[team,34,iter] <= 3){ # >= 17 para os relegados
      tab_counts[team]<-tab_counts[team]+1
    }
  }
}

df_gg<-data.frame(lista_equipas,tab_counts/5000 * 100)
colnames(df_gg)<-c("equipa","perc")

#Ordenar as equipas por ordem decrescente
df_gg$equipa = factor(df_gg$equipa, levels=c(df_gg[order(df_gg$perc,decreasing=FALSE),][,1])) 

ggplot(data=df_gg, aes(x=equipa,y=perc))+geom_bar(stat = "identity",fill="red",col="black")  +  scale_y_continuous(labels = function(x) paste0(x, "%"))+ coord_flip() +
       geom_text(aes(label = paste0(round(perc,digits=1),"%")),hjust=-0.01) + labs(x="Equipa", y="Percentagem")
       
       

#########################################################################################################################################################################             
####################################################################### GOLOS MARCADOS E SOFRIDOS #######################################################################
#Matrizes de golos marcados e sofridos previstos para cada iteração (1 cadeia)

scored_prev<-matrix(0,18,n)
conceded_prev<-matrix(0,18,n)

for(iter in 1:n){
  for(team in 1:18){
    for(game in 1:306){
      if(team == liga14_20$h_g[game]){
         scored_prev[team,iter]<-scored_prev[team,iter]+y.pred1[game,iter,1]
         conceded_prev[team,iter]<-conceded_prev[team,iter]+y.pred2[game,iter,1]
        }
      if(team == liga14_20$a_g[game]){
        scored_prev[team,iter]<-scored_prev[team,iter]+y.pred2[game,iter,1]
        conceded_prev[team,iter]<-conceded_prev[team,iter]+y.pred1[game,iter,1]
      }
    }
  }  
} 

#Golos marcacos e sofridos observados
scored_obs<-matrix(0,18,1)    #golos marcados observados
conceded_obs<-matrix(0,18,1)  #golos sofridos observados

for(team in 1:18){
  for(game in 1:306){
    if(team == liga14_20$h_g[game]){
      scored_obs[team]<-scored_obs[team] + liga14_20$y_g1[game]
      conceded_obs[team]<-conceded_obs[team] + liga14_20$y_g2[game]
    }
    if(team == liga14_20$a_g[game]){
      scored_obs[team]<-scored_obs[team] + liga14_20$y_g2[game]
      conceded_obs[team]<-conceded_obs[team] + liga14_20$y_g1[game]
    }
  }
}  


############################################################################################################################################################################
############################################## GRÁFICO DE GOLOS OBSERVADOS E QUANTIS DE 95% PARA OS PREVISTOS (FIGURA 6.6) #################################################

med_scored<-matrix(0,18,1) #Mediana dos golos marcados previstos
med_conceded<-matrix(0,18,1) #Mediana dos golos sofridos previstos
quantis_scored<-matrix(0,18,2) #Quantis de 5% e 95% para os golos marcados
quantis_conceded<-matrix(0,18,2) #Quantis de 5% e 95% para os golos sofridos

for(team in 1:18){
  med_scored[team]<-median(scored_prev[team,])
  quantis_scored[team,]<-unname(quantile(scored_prev[team,],c(0.05,0.95)))
  med_conceded[team]<-median(conceded_prev[team,])
  quantis_conceded[team,]<-unname(quantile(conceded_prev[team,],c(0.05,0.95)))
}


data2<-data.frame(scored_obs,lista_equipas)
colnames(data2)<-c("Golos","Equipas")

nova_ordem<-data2[order(data2$Golos,decreasing=FALSE),][,2]

#ordenar por ordem crescente de golos observados
data2$Equipas = factor(data2$Equipas, levels=c(nova_ordem))


data1<-data.frame(med_scored,quantis_scored,lista_equipas)
colnames(data1)<-c("Golos","Infe","Sup","Equipas")
data1$Equipas = factor(data1$Equipas, levels=c(nova_ordem)) 

tema <- theme(
  plot.title = element_text(hjust = 0.5, family = "open", size = (15), face = "bold", colour = "steelblue4"),
  legend.title = element_text(colour = "steelblue", face = "bold", family = "open"),
  axis.title = element_text(family = "open", size = (12), colour = "steelblue4", face = "bold"),
  axis.text = element_text(family = "open", colour = "black", size = (10))
)

#Plot golos marcados previstos(quantis) e golos marcados observados
ggplot(NULL, aes(x = Equipas, y = Golos)) + geom_linerange(data = data1, aes(ymin = Infe, ymax = Sup), size = 1, col = "blue") +
  geom_pointrange(data = data1, mapping = aes(x = Equipas,y=Golos, ymin = Infe, ymax = Sup), size = 0.7, col = "blue", shape = 22, fill = "blue")+
  geom_point(data=data2,col="yellow",size=3) + scale_x_discrete(guide = guide_axis(angle = 45)) + scale_y_continuous(limits = c(0, 120), breaks = seq(0, 120, 20)) +
  labs(x="Equipa",y="Golos marcados")+ggtitle("Golos observados e quantis de 95% para golos previstos, por equipa") + tema


############################################################################################################################################################################
#Usado para calcular as probabilidades de vitoria, derrota e empate (trabalhar com cadeia 1)

#diferença de golos(casa - fora)
pred.diff<-matrix(0,306,n) 
pred.diff<-y.pred1.chain1-y.pred2.chain1


prob_vict_casa<-matrix(0,306,1) #Probabilidade de vitória da equipa de casa para cada jogo
prob_vict_fora<-matrix(0,306,1) #Probabilidade de vitória da equipa de fora para cada jogo
prob_empate<-matrix(0,306,1) #Probabilidade de empate  para cada jogo

for(game in 1:306){
  prob_vict_casa[game]<-sum(pred.diff[game,] > 0)/n
  prob_vict_fora[game]<-sum(pred.diff[game,] < 0)/n
  prob_empate[game]<-sum(pred.diff[game,] == 0)/n
}



#DE FINETTI SCORE / BRIER SCORE
brier_score <- sum( (prob_vict_casa - liga14_20$Vitoria_casa)^2 + (prob_vict_fora - liga14_20$Vitoria_fora)^2 + (prob_empate - liga14_20$Empate)^2 )/nrow(prob_vict_casa)



